from app.handlers.router import router
import asyncio
import logging
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram import F
from aiogram.fsm.context import FSMContext
from app.keyboards import inline as inline_keyboards
from app.states.states import Pomodoro
from app.requests.get_cat_error import get_cat_error_async as get_cat_error
from app.requests.get_cocktail import get_cocktail_async as get_cocktail, get_ingredients_list
from app.requests.get_joke import get_random_joke_async as get_random_joke
from app.requests.get_number_fact import get_random_number_fact_async as get_random_number_fact
from app.requests.get_cat_gif import get_random_cat_gif_async as get_random_cat_gif
from app.requests.get_dog_gif import get_random_dog_gif_async as get_random_dog_gif
from app.requests.get_activity import get_random_activity_async as get_random_activity

@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.set_state(Pomodoro.Idle)
    await message.reply("–ü—Ä–∏–≤–µ—Ç! üëã")
    await message.answer("–Ø –º–Ω–æ–≥–æ —á—Ç–æ —É–º–µ—é üëá", reply_markup=inline_keyboards.main)

@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.reply(text="–≠—Ç–æ—Ç –±–æ—Ç ‚Äî —É—á–µ–±–Ω—ã–π –ø—Ä–æ–µ–∫—Ç! üìö –û–Ω –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –æ—Ç–¥—ã—Ö–æ–º –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é. –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏ –µ–º—É: \\@dianabol\\_metandienon\\_enjoyer ‚ùì", reply_markup=inline_keyboards.home, parse_mode='MarkdownV2')

@router.message(Command("contacts"))
async def cmd_contacts(message: Message):
    text = "–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ–º: üìû\n\n\\@dianabol\\_metandienon\\_enjoyer ü§ù\n\n[GitHub](https://github.com/Segun228)"
    await message.reply(text=text, reply_markup=inline_keyboards.home, parse_mode='MarkdownV2')

@router.callback_query(F.data == "productivity")
async def productivity_callback(callback:CallbackQuery, state: FSMContext):
    await state.set_state(Pomodoro.Idle)
    await callback.message.edit_text(
        text="–û—Ç–ª–∏—á–Ω–æ! üí™ –°–∞–º–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ. –í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Ñ—É–Ω–∫—Ü–∏—é üëá",
        reply_markup=inline_keyboards.pomodoro_menu
    )
    await callback.answer()

@router.callback_query(F.data == "contacts")
async def contacts_callback(callback:CallbackQuery):
    text = "–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ–º: üìû\n\n\\@dianabol\\_metandienon\\_enjoyer ü§ù\n\n[GitHub](https://github.com/Segun228)"
    await callback.message.edit_text(text=text, reply_markup=inline_keyboards.home, parse_mode='MarkdownV2')
    await callback.answer()

@router.callback_query(F.data == "main_menu")
async def main_menu_callback(callback:CallbackQuery):
    await callback.message.edit_text("–Ø –º–Ω–æ–≥–æ —á—Ç–æ —É–º–µ—é üëá", reply_markup=inline_keyboards.main)
    await callback.answer()

@router.callback_query(F.data == "joke")
async def callback_joke(callback:CallbackQuery):
    joke = await get_random_joke() 
    if joke is None:
        await callback.message.answer(text="–ù–µ –¥–æ —à—É—Ç–æ–∫ —Å–µ–π—á–∞—Å, –∏–¥–∏ —Ä–∞–±–æ—Ç–∞–π! üò†")
    else:
        await callback.message.reply(text=f"{joke} üòÇ", reply_markup=inline_keyboards.joke)
    await callback.answer()

@router.callback_query(F.data == "number")
async def callback_number(callback:CallbackQuery):
    fact = await get_random_number_fact()
    if fact is None:
        await callback.message.answer(text="–ù–µ –¥–æ —Ü–∏—Ñ–µ—Ä–æ–∫, –∏–¥–∏ —Ä–∞–±–æ—Ç–∞–π! üî¢")
    else:
        await callback.message.reply(text=f"{fact}", reply_markup=inline_keyboards.number)
    await callback.answer() 

@router.callback_query(F.data == "todo")
async def callback_todo(callback:CallbackQuery):
    activity = await get_random_activity()
    if activity is None:
        await callback.message.answer(text="–ò–¥–∏ —Ä–∞–±–æ—Ç–∞–π! üíº")
    else:
        await callback.message.reply(text=f"{activity} ‚úÖ", reply_markup=inline_keyboards.todo)
    await callback.answer() 

@router.callback_query(F.data == "cat")
async def callback_cat(callback:CallbackQuery):
    cat_gif_url = await get_random_cat_gif()
    if cat_gif_url is None:
        await callback.message.answer(text="–ù–µ –¥–æ –∫–æ—Ç–∏–∫–æ–≤, –∏–¥–∏ —Ä–∞–±–æ—Ç–∞–π! üòº")
    else:
        await callback.bot.send_animation(
            chat_id=callback.message.chat.id,
            animation=cat_gif_url,
            caption="–°–µ–≥–æ–¥–Ω—è —Ç—ã —Ç–∞–∫–æ–π –∫–æ—Ç–∏–∫! üêà",
            reply_markup=inline_keyboards.cat
        )
    await callback.answer()

@router.callback_query(F.data == "dog")
async def callback_dog(callback:CallbackQuery):
    dog_gif_url = await get_random_dog_gif()
    if dog_gif_url is None:
        await callback.message.answer(text="–ù–µ –¥–æ —Å–æ–±–∞–∫–µ–Ω–æ–≤, –∏–¥–∏ —Ä–∞–±–æ—Ç–∞–π! üê∂")
    else:
        await callback.bot.send_animation(
            chat_id=callback.message.chat.id,
            animation=dog_gif_url,
            caption="–°–û–ë–ê–ö–ï–ù! üêï",
            reply_markup=inline_keyboards.dog
        )
    await callback.answer()

@router.callback_query(F.data == "cocktail")
async def get_cocktail_callback(callback:CallbackQuery):
    cocktail_data = await get_cocktail()
    if cocktail_data is None or not cocktail_data.get("drinks"):
        await callback.message.answer(text="–•–∞—Ä–æ—à –±—É—Ö–∞—Ç—å, –∏–¥–∏ —Ä–∞–±–æ—Ç–∞–π! üçª")
    else:
        cocktail_info = cocktail_data["drinks"][0]
        cocktail_name = cocktail_info.get("strDrink", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        preparation = cocktail_info.get("strInstructions", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        ingredients_list = get_ingredients_list(cocktail_info=cocktail_info)
        caption = f"–í–æ—Ç –≤–∞—à –∫–æ–∫—Ç–µ–π–ª—å, –°—ç—Ä! üéâ\n\n**–ù–∞–∑–≤–∞–Ω–∏–µ:** {cocktail_name}\n\n**–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:**\n{ingredients_list}\n\n**–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:**\n{preparation}"
        await callback.bot.send_photo(
            chat_id=callback.message.chat.id,
            photo=cocktail_info.get("strDrinkThumb"),
            caption=caption,
            parse_mode='Markdown',
            reply_markup=inline_keyboards.cocktail
        )
    await callback.answer()

@router.callback_query(F.data == "rest")
async def rest_callback(callback:CallbackQuery):
    await callback.message.edit_text(
        text="–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! üèñÔ∏è –°–∞–º–æ–µ –≤—Ä–µ–º—è –Ω–µ–º–Ω–æ–≥–æ —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è. –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é üëá",
        reply_markup=inline_keyboards.rest
    )
    await callback.answer()

async def pomodoro_timer_worker(callback: CallbackQuery, state: FSMContext, duration: int):
    try:
        await asyncio.sleep(duration)
        current_state = await state.get_state()
        user_data = await state.get_data()
        counter = user_data.get('counter', 0)
        if current_state == Pomodoro.Work:
            counter += 1
            await state.update_data(counter=counter)
            if counter % 4 == 0:
                await state.set_state(Pomodoro.LongBreak)
                await callback.message.edit_text(f"–í—Ä–µ–º—è –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞ (20 –º–∏–Ω—É—Ç)! ‚òïÔ∏è", reply_markup=inline_keyboards.pomodoro_menu)
            else:
                await state.set_state(Pomodoro.ShortBreak)
                await callback.message.edit_text(f"–í—Ä–µ–º—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞ (5 –º–∏–Ω—É—Ç)! üçé", reply_markup=inline_keyboards.pomodoro_menu)
        elif current_state == Pomodoro.ShortBreak:
            await state.set_state(Pomodoro.Work)
            await callback.message.edit_text("–ü–µ—Ä–µ—Ä—ã–≤ –æ–∫–æ–Ω—á–µ–Ω! –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–∞–±–æ—Ç–µ. üìö", reply_markup=inline_keyboards.pomodoro_menu)
        elif current_state == Pomodoro.LongBreak:
            await state.set_state(Pomodoro.Idle)
            await callback.message.edit_text("–î–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ –æ–∫–æ–Ω—á–µ–Ω! –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ü–∏–∫–ª. üéâ", reply_markup=inline_keyboards.pomodoro_menu)
    except asyncio.CancelledError:
        logging.info("–¢–∞–π–º–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–∞–π–º–µ—Ä–µ: {e}")
    finally:
        user_data = await state.get_data()
        if user_data.get('task') is not None:
            await state.update_data(task=None)

@router.callback_query(F.data == "stop")
async def stop_pomodoro(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    task = user_data.get('task')
    if task:
        if not task.done():
            task.cancel()
        await state.update_data(task=None, counter=0)
        await state.set_state(Pomodoro.Idle)
        await callback.message.edit_text(
            text="–¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. üõë‚è∏Ô∏è",
            reply_markup=inline_keyboards.pomodoro_menu
        )
    else:
        await callback.message.edit_text("–¢–∞–π–º–µ—Ä –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω. ü§î", reply_markup=inline_keyboards.pomodoro_menu)
    await callback.answer()

@router.callback_query(F.data == "start", StateFilter(Pomodoro.Idle, Pomodoro.ShortBreak, Pomodoro.LongBreak))
async def start_pomodoro(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    existing_task = user_data.get('task')
    if existing_task and not existing_task.done():
        existing_task.cancel()
        await state.update_data(task=None)
    duration = 0
    current_state = await state.get_state()
    if current_state == Pomodoro.ShortBreak:
        duration = 5 * 60
    elif current_state == Pomodoro.LongBreak:
        duration = 20 * 60
    else:
        duration = 25 * 60
        await state.set_state(Pomodoro.Work)
    task = asyncio.create_task(pomodoro_timer_worker(callback, state, duration))
    await state.update_data(task=task)
    if current_state == Pomodoro.Idle:
        await callback.message.edit_text(f"–¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω: —Ä–∞–±–æ—Ç–∞ –Ω–∞ {duration // 60} –º–∏–Ω—É—Ç! ‚åö", reply_markup=inline_keyboards.stop)
    elif current_state == Pomodoro.ShortBreak:
        await callback.message.edit_text(f"–¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω: –∫–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤ –Ω–∞ {duration // 60} –º–∏–Ω—É—Ç! ‚òïÔ∏è", reply_markup=inline_keyboards.stop)
    elif current_state == Pomodoro.LongBreak:
        await callback.message.edit_text(f"–¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω: –¥–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ –Ω–∞ {duration // 60} –º–∏–Ω—É—Ç! üõãÔ∏è", reply_markup=inline_keyboards.stop)
    await callback.answer()

@router.message()
async def all_other_messages(message: Message):
    await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ üßê")
    photo_data = await get_cat_error()
    if photo_data:
        photo_to_send = BufferedInputFile(photo_data, filename="cat_error.jpg")
        await message.bot.send_photo(chat_id=message.chat.id, photo=photo_to_send)