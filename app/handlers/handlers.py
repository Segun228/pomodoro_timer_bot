from app.handlers.router import router
import datetime
import asyncio
import logging


from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram import F

from app.keyboards import inline as inline_keyboards
from app.keyboards import answer as answer_keyboards
from app.requests.get_cat_error import get_cat_error_async as get_cat_error
from app.requests.get_cocktail import get_cocktail_async as get_cocktail
from app.requests.get_cocktail import get_ingredients_list
from app.requests.get_joke import get_random_joke_async as get_random_joke
from app.requests.get_number_fact import get_random_number_fact_async as get_random_number_fact
from app.requests.get_cat_gif import get_random_cat_gif_async as get_random_cat_gif
from app.requests.get_dog_gif import get_random_dog_gif_async as get_random_dog_gif
from app.requests.get_activity import get_random_activity_async as get_random_activity
from app.states.states import Pomodoro


from aiogram.fsm.context import FSMContext
from aiogram.types import BufferedInputFile


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! üëã")
    await message.answer("–Ø –º–Ω–æ–≥–æ —á—Ç–æ —É–º–µ—é üëá", reply_markup=inline_keyboards.main)
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ Idle (–±–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ)
    await state.set_state(Pomodoro.Idle)

@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.reply(text="–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–æ—Å—Ç–æ —É—á–µ–±–Ω—ã–π –ø—Ä–æ–µ–∫—Ç! –û–Ω –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –æ—Ç–¥—ã—Ö–æ–º –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é\n\n\n–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã?\n–ü–∏—à–∏ –µ–º—É: \\@dianabol\\_metandienon\\_enjoyer", reply_markup=inline_keyboards.home, parse_mode='MarkdownV2')


@router.message(Command("contacts"))
async def cmd_contacts(message: Message):
    # –í–∞–∂–Ω–æ: –¥–ª—è MarkdownV2 –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (\)
    text = "–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ–º:\n\n\n\\@dianabol\\_metandienon\\_enjoyer\n\n\n[GitHub](https://github.com/Segun228)"
    await message.reply(text=text, reply_markup=inline_keyboards.home, parse_mode='MarkdownV2')


@router.callback_query(F.data == "productivity")
async def productivity_callback(callback:CallbackQuery):
    await callback.message.answer(
        text="–û—Ç–ª–∏—á–Ω–æ! –°–∞–º–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ. –í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Ñ—É–Ω–∫—Ü–∏—é",
        reply_markup=inline_keyboards.productivity
    )
    await callback.answer() # –î–æ–±–∞–≤–ª–µ–Ω–æ: –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–ª–±–µ–∫


@router.callback_query(F.data == "contacts")
async def contacts_callback(callback:CallbackQuery):
    # –í–∞–∂–Ω–æ: –¥–ª—è MarkdownV2 –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (\)
    text = "–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ–º:\n\n\n\\@dianabol\\_metandienon\\_enjoyer\n\n\n[GitHub](https://github.com/Segun228)"
    await callback.message.reply(text=text, reply_markup=inline_keyboards.home, parse_mode='MarkdownV2')
    await callback.answer() # –î–æ–±–∞–≤–ª–µ–Ω–æ: –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–ª–±–µ–∫


@router.callback_query(F.data == "main_menu")
async def main_menu_callback(callback:CallbackQuery):
    await callback.message.answer("–Ø –º–Ω–æ–≥–æ —á—Ç–æ —É–º–µ—é üëá", reply_markup=inline_keyboards.main)
    await callback.answer() # –£–∂–µ –±—ã–ª–æ: –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–ª–±–µ–∫


# -------------------------------------------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ API (–≤—Å–µ –≤—ã–∑–æ–≤—ã —Ç–µ–ø–µ—Ä—å —Å await –∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã callback.answer())
# -------------------------------------------------------------
@router.callback_query(F.data == "joke")
async def callback_joke(callback:CallbackQuery):
    joke = await get_random_joke() # <--- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
    if joke is None:
        await callback.message.answer(text="–ù–µ –¥–æ —à—É—Ç–æ–∫ —Å–µ–π—á–∞—Å, –∏–¥–∏ —Ä–∞–±–æ—Ç–∞–π!")
    else:
        await callback.message.reply(text=f"{joke}", reply_markup=inline_keyboards.joke)
    await callback.answer() # –î–æ–±–∞–≤–ª–µ–Ω–æ: –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–ª–±–µ–∫

@router.callback_query(F.data == "number")
async def callback_number(callback:CallbackQuery):
    fact = await get_random_number_fact() # <--- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
    if fact is None:
        await callback.message.answer(text="–ù–µ –¥–æ —Ü–∏—Ñ–µ—Ä–æ–∫, –∏–¥–∏ —Ä–∞–±–æ—Ç–∞–π!")
    else:
        await callback.message.reply(text=f"{fact}", reply_markup=inline_keyboards.number)
    await callback.answer() # –î–æ–±–∞–≤–ª–µ–Ω–æ: –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–ª–±–µ–∫


@router.callback_query(F.data == "todo")
async def callback_todo(callback:CallbackQuery):
    activity = await get_random_activity() # <--- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
    if activity is None:
        await callback.message.answer(text="–ò–¥–∏ —Ä–∞–±–æ—Ç–∞–π!")
    else:
        await callback.message.reply(text=f"{activity}", reply_markup=inline_keyboards.todo)
    await callback.answer() # –î–æ–±–∞–≤–ª–µ–Ω–æ: –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–ª–±–µ–∫


@router.callback_query(F.data == "cat")
async def callback_cat(callback:CallbackQuery):
    cat_gif_url = await get_random_cat_gif() # <--- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–Ω—Ç–∞–∫—Å–∏—Å)
    if cat_gif_url is None:
        await callback.message.answer(text="–ù–µ –¥–æ –∫–æ—Ç–∏–∫–æ–≤, –∏–¥–∏ —Ä–∞–±–æ—Ç–∞–π!")
    else:
        await callback.bot.send_animation(
            chat_id=callback.message.chat.id,
            animation=cat_gif_url, # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'animation' –¥–ª—è GIF
            caption=f"–°–µ–≥–æ–¥–Ω—è —Ç—ã —Ç–∞–∫–æ–π –∫–æ—Ç–∏–∫!",
            reply_markup=inline_keyboards.cat
        )
    await callback.answer() # –£–∂–µ –±—ã–ª–æ: –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–ª–±–µ–∫


@router.callback_query(F.data == "dog")
async def callback_dog(callback:CallbackQuery):
    dog_gif_url = await get_random_dog_gif() # <--- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
    if dog_gif_url is None:
        await callback.message.answer(text="–ù–µ –¥–æ —Å–æ–±–∞–∫–µ–Ω–æ–≤, –∏–¥–∏ —Ä–∞–±–æ—Ç–∞–π!")
    else:
        await callback.bot.send_animation(
            chat_id=callback.message.chat.id,
            animation=dog_gif_url, # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'animation' –¥–ª—è GIF
            caption="–°–û–ë–ê–ö–ï–ù!",
            reply_markup=inline_keyboards.dog
        )
    await callback.answer() # –£–∂–µ –±—ã–ª–æ: –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–ª–±–µ–∫

@router.callback_query(F.data == "cocktail")
async def get_cocktail_callback(callback:CallbackQuery):
    cocktail_data = await get_cocktail() # <--- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ cocktail_data –Ω–µ None –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–æ–∫ 'drinks'
    if cocktail_data is None or not cocktail_data.get("drinks"):
        await callback.message.answer(text="–•–∞—Ä–æ—à –±—É—Ö–∞—Ç—å, –∏–¥–∏ —Ä–∞–±–æ—Ç–∞–π!")
    else:
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –∫–æ–∫—Ç–µ–π–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ 'drinks'
        cocktail_info = cocktail_data["drinks"][0] # –¢–µ–ø–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω–æ, —Ç.–∫. —Å–ø–∏—Å–æ–∫ —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º, –∏—Å–ø–æ–ª—å–∑—É—è .get() —Å –∑–∞–ø–∞—Å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
        cocktail_name = cocktail_info.get("strDrink", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        preparation = cocktail_info.get("strInstructions", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        ingredients_list = get_ingredients_list(cocktail_info=cocktail_info) # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ

        caption = f"""
            –í–æ—Ç –≤–∞—à –∫–æ–∫—Ç–µ–π–ª—å, –°—ç—Ä! üéâ

            **–ù–∞–∑–≤–∞–Ω–∏–µ:** {cocktail_name}

            **–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:**
            {ingredients_list}

            **–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:**
            {preparation}
            """
        
        await callback.bot.send_photo(
            chat_id=callback.message.chat.id,
            photo=cocktail_info.get("strDrinkThumb"),
            caption=caption,
            parse_mode='Markdown',
            reply_markup=inline_keyboards.cocktail
        )
    await callback.answer() # –î–æ–±–∞–≤–ª–µ–Ω–æ: –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–ª–±–µ–∫

@router.callback_query(F.data == "rest")
async def rest_callback(callback:CallbackQuery):
    await callback.message.answer(
        text="–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –°–∞–º–æ–µ –≤—Ä–µ–º—è –Ω–µ–º–Ω–æ–≥–æ —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è. –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é",
        reply_markup=inline_keyboards.rest
    )
    await callback.answer() # –î–æ–±–∞–≤–ª–µ–Ω–æ: –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–ª–±–µ–∫


@router.callback_query(F.data == "productivity")
async def productivity_menu(callback:CallbackQuery, state: FSMContext):
    # –ü—Ä–∏ –≤—Ö–æ–¥–µ –≤ –º–µ–Ω—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Idle,
    # —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å Pomodoro
    await state.set_state(Pomodoro.Idle)
    await callback.message.answer(
        text="–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –°–∞–º–æ–µ –≤—Ä–µ–º—è –Ω–µ–º–Ω–æ–≥–æ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å! –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?",
        reply_markup=inline_keyboards.pomodoro_menu
    )
    await callback.answer() # –î–æ–±–∞–≤–ª–µ–Ω–æ: –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–ª–±–µ–∫


# -------------------------------------------------------------
# –õ–æ–≥–∏–∫–∞ Pomodoro-—Ç–∞–π–º–µ—Ä–∞
# -------------------------------------------------------------
async def pomodoro_timer_worker(callback: CallbackQuery, state: FSMContext, duration: int):
    try:
        await callback.message.answer(f"–¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {duration // 60} –º–∏–Ω—É—Ç!")
        await asyncio.sleep(duration)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ —Å–Ω–∞
        current_state = await state.get_state()
        user_data = await state.get_data()
        counter = user_data.get('counter', 0)

        # –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
        if current_state == Pomodoro.Work:
            counter += 1
            await state.update_data(counter=counter) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—á–µ—Ç—á–∏–∫
            
            if counter % 4 == 0:
                await state.set_state(Pomodoro.LongBreak)
                await callback.message.answer("–í—Ä–µ–º—è –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞ (15-30 –º–∏–Ω—É—Ç)!")
            else:
                await state.set_state(Pomodoro.ShortBreak)
                await callback.message.answer("–í—Ä–µ–º—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞ (5 –º–∏–Ω—É—Ç)!")
        
        elif current_state == Pomodoro.ShortBreak: # –ï—Å–ª–∏ –±—ã–ª –∫–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–∞–±–æ—Ç–µ
            await state.set_state(Pomodoro.Work)
            await callback.message.answer("–ü–µ—Ä–µ—Ä—ã–≤ –æ–∫–æ–Ω—á–µ–Ω! –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–∞–±–æ—Ç–µ.")
        
        elif current_state == Pomodoro.LongBreak: # –ü–æ—Å–ª–µ –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ Idle, –∑–∞–≤–µ—Ä—à–∞—è —Ü–∏–∫–ª
            await state.set_state(Pomodoro.Idle)
            await callback.message.answer("–î–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ –æ–∫–æ–Ω—á–µ–Ω! –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ü–∏–∫–ª.")
            
    except asyncio.CancelledError:
        # –≠—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ —Ç–∞–π–º–µ—Ä –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –∏–∑–≤–Ω–µ (–∫–Ω–æ–ø–∫–æ–π "—Å—Ç–æ–ø")
        logging.info("–¢–∞–π–º–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω")
        await callback.message.answer("–¢–∞–π–º–µ—Ä –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
        logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–∞–π–º–µ—Ä–µ: {e}")
    finally:
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ —Ç–∞–π–º–µ—Ä–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è,
        # —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —É—Ç–µ—á–µ–∫ –∏ –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∑–∞–ø—É—Å–∫–æ–º.
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –Ω–µ None, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø—ã—Ç–∞—Ç—å—Å—è –æ–±–Ω–æ–≤–∏—Ç—å.
        user_data = await state.get_data()
        if user_data.get('task') is not None:
            await state.update_data(task=None)


@router.callback_query(F.data == "start", F.state.in_({Pomodoro.Idle, Pomodoro.ShortBreak, Pomodoro.LongBreak}))
async def start_pomodoro(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    
    # ... (–∫–æ–¥ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏)

    duration = 0
    current_state = await state.get_state()

    # <--- –í–û–¢ –ó–î–ï–°–¨ –û–®–ò–ë–ö–ê!
    if current_state == Pomodoro.ShortBreak:
        duration = 5 * 60
        await state.set_state(Pomodoro.Work) # –û—à–∏–±–∫–∞: –ø–µ—Ä–µ—Ä—ã–≤ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è, –Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ Work
    elif current_state == Pomodoro.LongBreak:
        duration = 20 * 60
        await state.set_state(Pomodoro.Work) # –û—à–∏–±–∫–∞: –¥–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è, –Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ Work
    else: # Pomodoro.Idle
        duration = 25 * 60
        await state.set_state(Pomodoro.Work) # –≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã

    task = asyncio.create_task(pomodoro_timer_worker(callback, state, duration))
    await state.update_data(task=task)
    
    await callback.message.answer(f"–¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {duration // 60} –º–∏–Ω—É—Ç!")
    await callback.answer()


# -------------------------------------------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞)
# -------------------------------------------------------------
@router.message()
async def all_other_messages(message: Message):
    await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ üßê")
    # message.bot –≤—Å–µ–≥–¥–∞ –Ω–µ None –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö, –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
    photo_data = await get_cat_error() # <--- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
    if photo_data: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "truthy" –∑–Ω–∞—á–µ–Ω–∏–µ
        photo_to_send = BufferedInputFile(photo_data, filename="cat_error.jpg")
        await message.bot.send_photo(chat_id=message.chat.id, photo= photo_to_send)